// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package zircon_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZirconClient is the client API for Zircon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZirconClient interface {
	ValidateBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*BlockResponse, error)
	ConstructJob(ctx context.Context, in *JobStub, opts ...grpc.CallOption) (*JobStub, error)
}

type zirconClient struct {
	cc grpc.ClientConnInterface
}

func NewZirconClient(cc grpc.ClientConnInterface) ZirconClient {
	return &zirconClient{cc}
}

func (c *zirconClient) ValidateBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, "/zircon.Zircon/validateBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zirconClient) ConstructJob(ctx context.Context, in *JobStub, opts ...grpc.CallOption) (*JobStub, error) {
	out := new(JobStub)
	err := c.cc.Invoke(ctx, "/zircon.Zircon/constructJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZirconServer is the server API for Zircon service.
// All implementations must embed UnimplementedZirconServer
// for forward compatibility
type ZirconServer interface {
	ValidateBlock(context.Context, *Block) (*BlockResponse, error)
	ConstructJob(context.Context, *JobStub) (*JobStub, error)
	mustEmbedUnimplementedZirconServer()
}

// UnimplementedZirconServer must be embedded to have forward compatible implementations.
type UnimplementedZirconServer struct {
}

func (UnimplementedZirconServer) ValidateBlock(context.Context, *Block) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateBlock not implemented")
}
func (UnimplementedZirconServer) ConstructJob(context.Context, *JobStub) (*JobStub, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConstructJob not implemented")
}
func (UnimplementedZirconServer) mustEmbedUnimplementedZirconServer() {}

// UnsafeZirconServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZirconServer will
// result in compilation errors.
type UnsafeZirconServer interface {
	mustEmbedUnimplementedZirconServer()
}

func RegisterZirconServer(s grpc.ServiceRegistrar, srv ZirconServer) {
	s.RegisterService(&Zircon_ServiceDesc, srv)
}

func _Zircon_ValidateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZirconServer).ValidateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zircon.Zircon/validateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZirconServer).ValidateBlock(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zircon_ConstructJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZirconServer).ConstructJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zircon.Zircon/constructJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZirconServer).ConstructJob(ctx, req.(*JobStub))
	}
	return interceptor(ctx, in, info, handler)
}

// Zircon_ServiceDesc is the grpc.ServiceDesc for Zircon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zircon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zircon.Zircon",
	HandlerType: (*ZirconServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "validateBlock",
			Handler:    _Zircon_ValidateBlock_Handler,
		},
		{
			MethodName: "constructJob",
			Handler:    _Zircon_ConstructJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zircon.proto",
}
